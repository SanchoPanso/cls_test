Начало работы
=============

Допустим, у вас стоит задача тренировки сетей классификации на основе данных, собранных в сервисе collect.moster. 
Для начала использования проекта CLS вам потребуется выполнить несколько шагов:

Установка
---------

Для установки проекта CLS, выполните следующие команды:

.. code-block:: bash

   $ git clone https://github.com/t1masavin/CLS.git -b develop
   $ cd CLS
   $ python3 -m venv venv
   $ source venv/bin/activate
   (venv) $ pip install -e .


Настройка подключения к PostgreSQL
----------------------------------

Для того, чтобы уметь классифицировать людей на фото, их нужно правильно вырезать из изображения. 
Поэтому проект CLS использует базу данных PostgreSQL для хранения данных о сегментации людей. 
Прежде чем начать работу, убедитесь, что у вас установлен и запущен PostgreSQL. Затем укажите параметры подключения в файле конфигурации проекта.

.. code-block:: bash

    pictures_info_db_url: 'postgresql+psycopg2://psql_user:root@172.20.0.1:5432/psql_db'

Если образ базы данных не запущен, то см. :doc:`postgres`.


Скачивание датасета
-------------------

Для обучения модели нужны изображения и их разметка. Допустим, мы хотим обучить классифицировать группу `tits_size`.
Для загрузки такого датасета из сервиса `collect.moster` выполните следующую команду:

.. code-block:: bash

   python cls/classification/load_group.py --group tits_size

После выполнения этой команды в корневой папке репозитория должна появиться папка DATA со следующим содержанием:

.. code-block:: bash

   - DATA/
      - pictures/
         - ...
      - meta/
         - ...
      - datasets/
         - tits_size.json

Что произошло? Создалась папка с данными `DATA`, путь к которой прописан в файле конфигурации. 
В этой папке скачались изображения в папку `pictures`, скачались метаданные о наборах изображений в папку `meta`
и на  их основе создан json-файл со сводной информацией о датасете. Подробнее см. :doc:`bottles`.

Также в дальнейшем для тестирования нам понадобится датасет группы `test`. Скачаем его тоже:

.. code-block:: bash

   python cls/classification/load_group.py --group test


Сегментация людей
-----------------

После загрузки датасета можно приступить к сегментации людей на изображениях и записи сегментационных масок в базу данных.
Это необходимо, поскольку чтобы классифицировать человека, его нужно вырезать из фотографии. 
Запустите сегментацию следующей командой:

.. code-block:: bash

   python cls/classification/segment_builder.py --model_path ${YOUR_MODEL_PATH}


`YOUR_MODEL_PATH` - путь до модели YOLOv8, обученной сегментировать людей. Чтобы обучить новую модель, см. :doc:`instance_segmentation`.


Тренировка классификации
------------------------

После получения сегментированных данных можно приступить к тренировке модели классификации. Запустите процесс обучения следующей командой:

.. code-block:: bash

   python cls/classification/train.py --cat tits_size --epochs 50

После этого в папке DATA/models/tits_size появится папка с прошедшим экспериментом, 
в которой можно найти логи и полученные модели:

.. code-block:: bash

   - DATA/models/tits_size/v__0_train_eff_16_0.001/
      - checkpoints/  
      - csv_logs/  
      - onnx/  
      - torchscripts/  
      - train_batches/

* checkpoints - папка с чекпоинтами в формате pytorch-lightning;
* csv_logs - папка с логом тренировки в формате csv;
* torchscripts - папка с моделью в формате torchscript;
* train_batches - папка с тренировочными батчами (для визуальной проверки);
* onnx - папка с моделью в формате onnx.


Выгрузка результатов
--------------------

После завершения обучения модели вы можете выгрузить результаты прохода сети для выбранного датасета.
Для этого сначала нужно создать файлы с возвращаемой метой (ret_meta.json).

Пример запуска прохода сеток для изображении из группы `test`::

    python cls/classification/segment_meta_builder.py --groups 'test'


После этого можно оправить полученные файлы ret_meta.json на сервер::

    python cls/classification/post_ret_meta.py --groups 'test' 


Что дальше?
-----------

Проект разделен на несколько модулей, отвечающие за свою отдельную задачу.

 - :doc:`classification` - модуль отвечает за тренировку моделей классификации. В его задачи входит скачивание изображений, нахождение сегментаций, тренировка с использованием `W&B <https://wandb.ai/site>`_, инференс полученных моделей и др.
 - :doc:`instance` - модель отвечает за скачивание датасета сегментации с roboflow и тренировку модели YOLO. 
 - :doc:`demonstration` - модуль отвечает за демонтрацию моделей с использованием `gradio <https://www.gradio.app/>`_. 

Чтобы ознакомиться с остальными функциями, пройдите по этим ссылкам.
