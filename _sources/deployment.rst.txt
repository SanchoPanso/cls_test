Разворачивание
==============

Для того, чтобы развернуть систему инференса, которая обрабатывает запросы из RabbitMQ,
нужно выполнить следующие шаги:

1. :ref:`model_storage`
2. :ref:`modeler`

.. _model_storage:

Разворачивание Model Storage
----------------------------

На данном этапе мы разворачивам хранилище данных, которое хостит модели в Triton Server.

Клонирование репозитория
^^^^^^^^^^^^^^^^^^^^^^^^

Клонируйте ваш репозиторий с Dockerfile и остальными необходимыми файлами в вашу рабочую среду:

.. code-block:: bash

    git clone https://github.com/SanchoPanso/model_storage.git
    cd model_storage

Конфигурация .env файла
^^^^^^^^^^^^^^^^^^^^^^^

Убедитесь, что файл `.env` находится в корне вашего проекта и 
содержит нужные переменные окружения. 
Проверьте, чтобы значения в файле соответствовали 
вашим требованиям безопасности и конфиденциальности.

.. note::

    Скорее всего, ничего менять не нужно. Однако, могут возникнуть
    проблемы с доступом к файлам, созданным в volume из запущенного контейнера.
    Поэтому вам может понадобиться установить 
    номер пользователя USER_UID и номер группы USER_GID,
    равными значениям у вашего локального пользователя, которые можно найти командами:

    .. code-block:: bash

        id -u   # USER_UID
        id -g   # USER_GID

Подготовка хранилища
^^^^^^^^^^^^^^^^^^^^

В конфигурации docker-compose.yaml определены два тома:

    - ``./storage:/storage`` - Общее хранилище для файлов. Это место, где можно хранить различные данные, доступ к которым необходим из контейнера. Все файлы, помещенные в локальную папку storage, будут доступны внутри контейнера по пути /storage.
    - ``./storage/model_repository:/models`` - Репозиторий моделей для Triton Server. Этот том используется для хранения моделей, которые Triton Server будет использовать для выполнения инференса. Модели должны быть организованы в соответствии с требованиями Triton Server, и они должны быть доступны в папке storage/model_repository на хосте.

Бэкап хранилища можно взять отсюда: https://drive.google.com/file/d/1ByyoanrLkJqibiT-fM-Tfpyd42FXyHfo/view?usp=sharing

.. note::

    Это временное хранение бэкапа, его необходимо переместить в другое место

Запуск контейнера
^^^^^^^^^^^^^^^^^

Используйте Docker Compose для сборки и запуска вашего контейнера:

.. code-block:: bash
    
    docker-compose up --build -d

Команда соберет образ и запустит контейнер на основе вашего docker-compose.yaml и Dockerfile. 

Проверка работы сервисов
^^^^^^^^^^^^^^^^^^^^^^^^

Проверка SSH
""""""""""""

После того как контейнер будет запущен, вы можете проверить SSH доступ:

.. code-block:: bash
    
    ssh user@0.0.0.0 -p 4000

Замените user, если вы использовали другое значение в вашем .env файле.
Также предоставьте пароль, записанный в том же .env файле.

Проверка FastAPI
""""""""""""""""

Откройте в браузере следующий URL для доступа к FastAPI серверу:

.. code-block:: bash
    
    http://localhost:8300/docs

Здесь вы сможете увидеть сваггер документацию вашего API.

.. note::

    Если вы работаете на удаленном компьютере с досупом по SSH, 
    используйте проброс порта на локальную машину,
    чтобы иметь доступ к сервису, в том числе и в браузере:

    .. code-block:: bash
    
        ssh -L 8300:localhost:8300 <your-username>@88.146.116.23 -p 999 -i <path-to-your-private-key>
    

Проверка Triton Server
""""""""""""""""""""""

Для проверки сервера Triton убедитесь, что он доступен и работает, выполнив команду:

.. code-block:: bash
    
    curl -o /dev/null -s -w "%{http_code}\n" http://localhost:8100/v2/health/live

Если Triton server жив, то команда вернет код 200. 

Остановка и очистка
^^^^^^^^^^^^^^^^^^^

Для остановки и удаления контейнера используйте следующую команду Docker Compose:

.. code-block:: bash
    
    docker-compose down

Это остановит и удалит все контейнеры, а также сеть, которые были созданы.

.. _modeler:

Разворачивание Modeler
---------------------

На данном этапе происходит разворачивание системы обработки запросов через RabbitMQ 
и инференс моделей Triton Server данных, пришедших с этими запросами.

.. note::

    Убедитесь, что model storage запущен на предыдущем шаге (.. _model_storage:).
    В нем хостятся модели для инференса и без него modeler не будет работать.

Клонирование репозитория
^^^^^^^^^^^^^^^^^^^^^^^^

Клонируйте ваш репозиторий с Dockerfile и остальными необходимыми файлами в вашу рабочую среду:

.. code-block:: bash

    git clone git@bitbucket.org:luckytube/modeler.git -b develop
    cd modeler

Конфигурация .env файла
^^^^^^^^^^^^^^^^^^^^^^^

Убедитесь, что файл `.env` находится в корне вашего проекта и 
содержит нужные переменные окружения. 

Убедитесь, что IP адрес в переменных ``TRITON_HOST``, ``ADDITIONAL_TRITON_HOST`` совпадает c 
IP адресом model storage. Узнать его адрес можно следующей командой:

.. code-block:: bash

    docker inspect -f '{{range.NetworkSettings.Networks}}{{.Gateway}}{{end}}' model_storage


Запуск контейнера
^^^^^^^^^^^^^^^^^

Используйте Docker Compose для сборки и запуска вашего контейнера:

.. code-block:: bash
    
    docker-compose up --build -d

Команда соберет образ и запустит контейнер на основе вашего docker-compose.yaml и Dockerfile. 
Внутри контейнера запустится 2 сервера: тестовый и для продакшена.

Проверка работы сервисов
^^^^^^^^^^^^^^^^^^^^^^^^

Проверка логов
""""""""""""""

В папке ``logs`` появится 2 файла:

- test.log
- prod.log

Здесь хранятся логи для серверов для тестирования и для продакшена, соответственно.
Если прослушка очереди RabbitMQ стартовала успешно, в начале файлов появится следующее сообщение:

.. code-block:: bash

     [x] Awaiting RPC requests

Также здесь записываются входные и выходные данные обработки.

Проверка клиента
""""""""""""""""

После того как контейнер будет запущен, вы можете запустить тестового клиента, 
который посылает сообщение в RabbitMQ и ждет ответа.

Для его запуска установите необходимые пакеты Python и запустите его:

.. code-block:: bash

   $ python3 -m venv venv
   $ source venv/bin/activate
   (venv) $ pip install poetry
   (venv) $ poetry install .
   (venv) $ python rabbit_client.py

Проверка PostgreSQL
""""""""""""""""""

Для просмотра базы данных PostgreSQL с логами воспользуйтесь данными из .env файла 
и, например, расширением VS Code для просмотра таблицы с логами.

Остановка и очистка
^^^^^^^^^^^^^^^^^^^

Для остановки и удаления контейнера используйте следующую команду Docker Compose:

.. code-block:: bash
    
    docker-compose down

Это остановит и удалит все контейнеры, а также сеть, которые были созданы.



