.. _modeler:

Разворачивание Modeler
======================

На данном этапе происходит разворачивание системы обработки запросов через RabbitMQ 
и инференс моделей Triton Server данных, пришедших с этими запросами.

.. note::

    Убедитесь, что model storage запущен на предыдущем шаге (.. _model_storage:).
    В нем хостятся модели для инференса и без него modeler не будет работать.

Клонирование репозитория
------------------------

Клонируйте ваш репозиторий с Dockerfile и остальными необходимыми файлами в вашу рабочую среду:

.. code-block:: bash

    git clone git@bitbucket.org:luckytube/modeler.git -b develop
    cd modeler

Конфигурация .env файла
------------------------

Убедитесь, что файл `.env` находится в корне вашего проекта и 
содержит нужные переменные окружения. 

Убедитесь, что IP адрес в переменных ``TRITON_HOST``, ``ADDITIONAL_TRITON_HOST`` совпадает c 
IP адресом model storage. Узнать его адрес можно следующей командой:

.. code-block:: bash

    docker inspect -f '{{range.NetworkSettings.Networks}}{{.Gateway}}{{end}}' model_storage


Запуск контейнера
------------------------

Используйте Docker Compose для сборки и запуска вашего контейнера:

.. code-block:: bash
    
    docker-compose up --build -d

Команда соберет образ и запустит контейнер на основе вашего docker-compose.yaml и Dockerfile. 
Внутри контейнера запустится 2 сервера: тестовый и для продакшена.

Проверка работы сервисов
------------------------

Проверка логов
^^^^^^^^^^^^^^

В папке ``logs`` появится 2 файла:

- test.log
- prod.log

Здесь хранятся логи для серверов для тестирования и для продакшена, соответственно.
Если прослушка очереди RabbitMQ стартовала успешно, в начале файлов появится следующее сообщение:

.. code-block:: bash

     [x] Awaiting RPC requests

Также здесь записываются входные и выходные данные обработки.

Проверка клиента
^^^^^^^^^^^^^^^^

После того как контейнер будет запущен, вы можете запустить тестового клиента, 
который посылает сообщение в RabbitMQ и ждет ответа.

Для его запуска установите необходимые пакеты Python и запустите его:

.. code-block:: bash

   $ python3 -m venv venv
   $ source venv/bin/activate
   (venv) $ pip install poetry
   (venv) $ poetry install .
   (venv) $ python rabbit_client.py

Проверка PostgreSQL
^^^^^^^^^^^^^^^^^

Для просмотра базы данных PostgreSQL с логами воспользуйтесь данными из .env файла 
и, например, расширением VS Code для просмотра таблицы с логами.

Остановка и очистка
------------------------

Для остановки и удаления контейнера используйте следующую команду Docker Compose:

.. code-block:: bash
    
    docker-compose down

Это остановит и удалит все контейнеры, а также сеть, которые были созданы.



